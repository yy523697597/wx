{"errors":[],"warnings":[],"version":"2.7.0","hash":"33e54ca2e7fb6dd67770","time":1277,"publicPath":"","assetsByChunkName":{"main":"manba.js"},"assets":[{"name":"manba.js","size":9549,"chunks":[0],"chunkNames":["main"],"emitted":true}],"entrypoints":{"main":{"chunks":[0],"assets":["manba.js"]}},"chunks":[{"id":0,"rendered":true,"initial":true,"entry":true,"extraAsync":false,"size":16557,"names":["main"],"files":["manba.js"],"hash":"3676fefe7037ae05d382","parents":[],"origins":[{"moduleId":1,"module":"multi /Users/alicia/Documents/develop/github/manba/manba.js","moduleIdentifier":"multi /Users/alicia/Documents/develop/github/manba/manba.js","moduleName":"multi ./manba.js","loc":"","name":"main","reasons":[]}]}],"modules":[{"id":0,"identifier":"/Users/alicia/Documents/develop/github/heyui/hey-cli/node_modules/babel-loader/lib/index.js??ref--7-0!/Users/alicia/Documents/develop/github/manba/manba.js","name":"./manba.js","index":1,"index2":0,"size":16529,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":"multi /Users/alicia/Documents/develop/github/manba/manba.js","issuerId":1,"issuerName":"multi ./manba.js","failed":false,"errors":0,"warnings":0,"reasons":[{"moduleId":1,"moduleIdentifier":"multi /Users/alicia/Documents/develop/github/manba/manba.js","module":"multi ./manba.js","moduleName":"multi ./manba.js","type":"single entry","userRequest":"/Users/alicia/Documents/develop/github/manba/manba.js","loc":"main:100000"}],"usedExports":true,"providedExports":null,"depth":1,"source":"'use strict';\n\n;(function (name, definition) {\n  var hasDefine = typeof define === 'function',\n      hasExports = typeof module !== 'undefined' && module.exports;\n  if (hasDefine) {\n    define(definition);\n  } else if (hasExports) {\n    module.exports = definition();\n  } else {\n    this[name] = definition();\n  }\n})('manba', function () {\n  \"use strict\";\n\n  var FORMAT_LIST = {\n    \"l\": \"YYYY-MM-DD\",\n    \"ll\": \"YYYY年MM月DD日\",\n    \"k\": \"YYYY-MM-DD hh:mm\",\n    \"kk\": \"YYYY年MM月DD日 hh点mm分\",\n    \"kkk\": \"YYYY年MM月DD日 hh点mm分 q\",\n    \"f\": \"YYYY-MM-DD hh:mm:ss\",\n    \"ff\": \"YYYY年MM月DD日 hh点mm分ss秒\",\n    \"fff\": \"YYYY年MM月DD日 hh点mm分ss秒 星期w\",\n    \"n\": \"MM-DD\",\n    \"nn\": \"MM月DD日\"\n  };\n\n  var timeDelay = 0;\n\n  var _SECONDS = 1000;\n  var _MINUTES = 1000 * 60;\n  var _HOURS = 1000 * 60 * 60;\n  var _DAYS = 1000 * 60 * 60 * 24;\n  var _WEEKS = _DAYS * 7;\n  var _YEARS = _DAYS * 365;\n  var MSE = new Date(1970, 0, 1, 0, 0, 0).getTime();\n\n  var WEEK = ['日', '一', '二', '三', '四', '五', '六'];\n  var DAY_STRING = ['上午', '下午'];\n\n  function _Manba(arg1, arg2) {\n    Utils.initmanba(this, arg1, arg2);\n    return this;\n  }\n\n  _Manba.prototype.format = function (str) {\n    var m = this;\n    var v = this.isValid();\n    if (v !== true) return v;\n\n    str = str || \"l\";\n    var formatStr = FORMAT_LIST[str] || str;\n    return Utils.format(m._date, formatStr);\n  };\n\n  _Manba.prototype.UTCformat = function (str) {\n    var m = this;\n\n    var v = this.isValid();\n    if (v !== true) return v;\n\n    str = str || \"l\";\n    var formatStr = FORMAT_LIST[str] || str;\n    return Utils.UTCformat(m._date, formatStr);\n  };\n\n  _Manba.prototype.toString = function () {\n    var v = this.isValid();\n    if (v !== true) return v;\n    return this._date.toString();\n  };\n\n  _Manba.prototype.toISOString = function (utcZone) {\n    var v = this.isValid();\n    if (v !== true) return v;\n    var offset = 0;\n    if (utcZone !== undefined) {\n      offset = utcZone * 60;\n    } else {\n      offset = -this._date.getTimezoneOffset();\n    }\n    var dif = offset >= 0 ? '+' : '-';\n    // console.log(Utils.pad(offset / 60))\n    var times = manba(this.time() + offset * 60 * 1000);\n    return times.UTCformat(\"yyyy-MM-ddThh:mm:ss\") + dif + Utils.pad(offset / 60) + ':' + Utils.pad(offset % 60);\n  };\n\n  _Manba.prototype.toLocalString = function () {\n    var v = this.isValid();\n    if (v !== true) return v;\n    var offset = -this._date.getTimezoneOffset();\n    var dif = offset >= 0 ? '+' : '-';\n    return this.format(\"yyyy-MM-ddThh:mm:ss\") + dif + Utils.pad(offset / 60) + ':' + Utils.pad(offset % 60);\n  };\n\n  _Manba.prototype.distance = function (_m, type, weekStart) {\n    var v = this.isValid();\n    if (v !== true) return v;\n    var m = this;\n    type = type || manba.DAY;\n    _m = manba(_m);\n    v = _m.isValid();\n    if (v !== true) return v;\n    switch (type) {\n      case manba.MINUTE:\n        return Math.floor((m.time() - _m.time()) / 60 / 1000);\n      case manba.HOUR:\n        return Utils.getHours(m._date) - Utils.getHours(_m._date);\n      case manba.DAY:\n        return Utils.getDays(m._date) - Utils.getDays(_m._date);\n      case manba.WEEK:\n        return (Utils.getDays(m.startOf(manba.WEEK, weekStart)._date) - Utils.getDays(_m.startOf(manba.WEEK, weekStart)._date)) / 7;\n      case manba.MONTH:\n        return Utils.getMonths(m._date) - Utils.getMonths(_m._date);\n      case manba.YEAR:\n        return m._date.getYear() - _m._date.getYear();\n    }\n    return 0;\n  };\n\n  _Manba.prototype.getWeekOfYear = function (weekStart) {\n    weekStart = (weekStart || 0) - 0;\n    if (isNaN(weekStart) || weekStart > 6) {\n      weekStart = 0;\n    }\n    var year = this.year();\n    var firstDay = this.startOf(manba.YEAR);\n    var firstWeekDays = 7 - firstDay.day() + weekStart;\n    var dayOfYear = (this.startOf(manba.DAY).time() - firstDay.time()) / (24 * 3600 * 1000) + 1;\n    return Math.ceil((dayOfYear - firstWeekDays) / 7) + 1;\n  };\n\n  _Manba.prototype.getWeekOfMonth = function (weekStart) {\n    weekStart = (weekStart || 0) - 0;\n    if (isNaN(weekStart) || weekStart > 6) {\n      weekStart = 0;\n    }\n    var dayOfWeek = this.day();\n    var day = this.date();\n    return Math.ceil((day - dayOfWeek - 1) / 7) + (dayOfWeek >= weekStart ? 1 : 0);\n  };\n\n  _Manba.prototype.isLeapYear = function () {\n    var v = this.isValid();\n    if (v !== true) return v;\n    return Utils.isLeapYear(this.year());\n  };\n\n  _Manba.prototype.isThisYear = function () {\n    var v = this.isValid();\n    if (v !== true) return v;\n    return Utils.timestamp(this._date);\n  };\n\n  _Manba.prototype.isBefore = function () {\n    var v = this.isValid();\n    if (v !== true) return v;\n    return Utils.timestamp(this._date);\n  };\n\n  _Manba.prototype.isAfter = function () {\n    var v = this.isValid();\n    if (v !== true) return v;\n    return Utils.timestamp(this._date);\n  };\n\n  _Manba.prototype.month = function (num) {\n    var v = this.isValid();\n    if (v !== true) return v;\n    var m = this;\n    if (num == undefined) {\n      return m._date.getMonth() + 1;\n    }\n    num = parseInt(num);\n    num = m._date.setMonth(num - 1);\n    return m;\n  };\n\n  _Manba.prototype.add = function (num, type) {\n    var v = this.isValid();\n    if (v !== true) return v;\n    var m = this;\n    num = parseInt(num);\n    type = type || manba.DAY;\n\n    switch (type) {\n      case manba.DAY:\n        m.time(m.time() + num * _DAYS);\n        break;\n      case manba.MONTH:\n        var originDay = m.date();\n        var month_add = m.month() + num;\n        m.month(month_add);\n        if (m.date() != originDay) {\n          m.add(-1, manba.MONTH);\n          m.date(m.endOf(manba.MONTH).date());\n        }\n        break;\n      case manba.QUARTER:\n        m.month(m.month() + num * 3);\n        break;\n      case manba.YEAR:\n        m.year(m.year() + num);\n        break;\n      case manba.WEEK:\n        m.time(m.time() + num * _WEEKS);\n        break;\n      case manba.HOUR:\n        m.time(m.time() + num * _HOURS);\n        break;\n      case manba.MINUTE:\n        m.time(m.time() + num * _MINUTES);\n        break;\n      case manba.SECOND:\n        m.time(m.time() + num * _SECONDS);\n        break;\n      case manba.TIME:\n        m.time(m.time() + num);\n        break;\n    }\n    return m;\n  };\n\n  _Manba.prototype.clone = function () {\n    return new _Manba(this);\n  };\n\n  _Manba.prototype.endOf = function (type, set) {\n    var v = this.isValid();\n    if (v !== true) return v;\n    var m = new _Manba(this);\n    type = type || manba.DAY;\n    m = m.startOf(type, set);\n    m.add(1, type);\n    // if (manba.DAY == type||manba.WEEK == type) {\n    m.add(-1, manba.SECOND);\n    // } else {\n    // m.add(-1, manba.DAY);\n    // }\n    return m;\n  };\n\n  _Manba.prototype.startOf = function (type, set) {\n    var v = this.isValid();\n    if (v !== true) return v;\n    var m = new _Manba(this);\n    type = type || manba.DAY;\n    switch (type) {\n      case manba.DAY:\n        m.milliseconds(0);\n        m.seconds(0);\n        m.minutes(0);\n        m.hours(0);\n        break;\n      case manba.MONTH:\n        m.date(1);\n        m = m.startOf(manba.DAY);\n        break;\n      case manba.QUARTER:\n        m = m.startOf(manba.MONTH);\n        m.add(-(m.month() - 1) % 3, manba.MONTH);\n        break;\n      case manba.WEEK:\n        m = m.startOf(manba.DAY);\n        set = set || manba.SUNDAY;\n        var startDay = set == manba.SUNDAY ? 0 : 1;\n        if (m.day() == 0 && startDay == 1) {\n          startDay = -6;\n        }\n        m.add(-m.day() + startDay, manba.DAY);\n        break;\n      case manba.YEAR:\n        m = m.startOf(manba.DAY);\n        m.month(1);\n        m.date(1);\n        break;\n      case manba.HOUR:\n        m.time(Math.floor(m.time() / _HOURS) * _HOURS);\n        break;\n    }\n    return m;\n  };\n\n  _Manba.prototype.isValid = function () {\n    return Utils.isDate(this._date) ? true : \"Invalid Date\";\n  };\n\n  var Utils = {\n    initmanba: function initmanba(manba_obj, arg1, arg2) {\n      var _date = new Date(),\n          date_bak = _date;\n      if (arg1 != undefined) {\n        if (Utils.isNumber(arg1)) {\n          // if (arg1 < 9999999999) arg1 = arg1 * 1000;\n          _date.setTime(arg1);\n        } else if (Utils.isArray(arg1)) {\n          Utils.padMonth(arg1);\n          _date = Utils.initDateWithArray(arg1);\n        } else if (Utils.isDate(arg1)) {\n          _date = arg1;\n        } else if (Utils.isString(arg1)) {\n          _date = Utils.parse(arg1, arg2);\n        } else if (arg1 instanceof _Manba) {\n          _date = new Date(arg1.time());\n        }\n      }\n      manba_obj._date = _date;\n      if (date_bak === _date && timeDelay != 0) {\n        manba_obj.add(timeDelay, manba.TIME);\n      }\n    },\n    initDateWithArray: function initDateWithArray(args) {\n      if (args.length > 1) {\n        return new Date(new (Function.prototype.bind.apply(Date, [0].concat(args)))().setFullYear(args[0]));\n      }\n      return new Date();\n    },\n    pad: function pad(num, targetLength) {\n      targetLength = targetLength || 2;\n      var padString = '0';\n      num = String(Math.abs(num) || 0);\n      if (num.length >= targetLength) {\n        return num;\n      } else {\n        targetLength = targetLength - num.length;\n        padString += Array(targetLength + 1).join(padString);\n        return padString.slice(0, targetLength) + String(num);\n      }\n    },\n    parse: function parse(str, arg2) {\n      if (Utils.isString(arg2)) {\n        var obj = { Y: 0, M: 1, D: 0, H: 0, m: 0, S: 0 };\n        arg2.replace(/([^YyMDdHhmsS]*?)(([YyMDdHhmsS])\\3*)([^YyMDdHhmsS]*?)/g, function (m, $1, $2, $3, $4, idx, old) {\n          var num = parseInt(str.substr(idx + $1.length, $2.length), 10);\n          if ($3.toLowerCase() == 'm') {\n            obj[$3] = num;\n          } else {\n            obj[$3.toUpperCase()] = num;\n          }\n          return '';\n        });\n        obj.M--;\n        var date = Utils.initDateWithArray([obj.Y, obj.M, obj.D, obj.H, obj.m, obj.S]);;\n        return date;\n      }\n      var aspNetJsonRegex = /^(\\d{4,})\\-(\\d{2})\\-(\\d{2})\\s?\\:?(\\d{2})?\\:?(\\d{2})?\\:?(\\d{2})?$/i;\n      var matched = aspNetJsonRegex.exec(str);\n\n      if (matched !== null) {\n\n        matched.shift();\n        Utils.padMonth(matched);\n        Utils.popUndefined(matched);\n        return Utils.initDateWithArray(matched);\n      }\n      var date = new Date(str);\n      if (date == \"Invalid Date\") {\n        // console.error(\"Invalid date parse from \\\"\" + str + \"\\\"\");\n        // return null;\n        throw new Error('Invalid date parse from ' + str);\n      } else {\n        return date;\n      }\n    },\n    popUndefined: function popUndefined(arr) {\n      if (arr.length > 0 && arr[arr.length - 1] == undefined) {\n        arr.pop();\n        return Utils.popUndefined(arr);\n      }\n      return arr;\n    },\n    padMonth: function padMonth(arr) {\n      //自动补充月份\n      if (arr.length > 1 && arr[1] > 0) arr[1] -= 1;\n    },\n    isLeapYear: function isLeapYear(year) {\n      return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n    },\n    format: function format(date, formatStr) {\n      var str = formatStr;\n      str = str.replace(/yyyy|YYYY/, this.pad(date.getFullYear(), 4));\n      str = str.replace(/yy|YY/, date.getFullYear() % 100 > 8 ? (date.getFullYear() % 100).toString() : '0' + date.getFullYear() % 100);\n      str = str.replace(/MM/, date.getMonth() > 8 ? (date.getMonth() + 1).toString() : '0' + (date.getMonth() + 1));\n      str = str.replace(/M/g, date.getMonth() + 1);\n      str = str.replace(/w|W/g, WEEK[date.getDay()]);\n      str = str.replace(/dd|DD/, this.pad(date.getDate()));\n      str = str.replace(/d|D/g, date.getDate());\n      str = str.replace(/hh|HH/, this.pad(date.getHours()));\n      str = str.replace(/h|H/g, date.getHours());\n      str = str.replace(/mm/, this.pad(date.getMinutes()));\n      str = str.replace(/m/g, date.getMinutes());\n      str = str.replace(/ss|SS/, this.pad(date.getSeconds()));\n      str = str.replace(/s|S/g, date.getSeconds());\n      str = str.replace(/q|Q/g, date.getHours() > 12 ? DAY_STRING[1] : DAY_STRING[0]);\n      return str;\n    },\n    UTCformat: function UTCformat(date, formatStr) {\n      var str = formatStr;\n      str = str.replace(/yyyy|YYYY/, this.pad(date.getFullYear(), 4));\n      str = str.replace(/yy|YY/, date.getUTCFullYear() % 100 > 8 ? (date.getUTCFullYear() % 100).toString() : '0' + date.getUTCFullYear() % 100);\n      str = str.replace(/MM/, date.getUTCMonth() > 8 ? (date.getUTCMonth() + 1).toString() : '0' + (date.getUTCMonth() + 1));\n      str = str.replace(/M/g, date.getUTCMonth() + 1);\n      str = str.replace(/w|W/g, WEEK[date.getUTCDay()]);\n      str = str.replace(/dd|DD/, this.pad(date.getUTCDate()));\n      str = str.replace(/d|D/g, date.getUTCDate());\n      str = str.replace(/hh|HH/, this.pad(date.getUTCHours()));\n      str = str.replace(/h|H/g, date.getUTCHours());\n      str = str.replace(/mm/, this.pad(date.getUTCMinutes()));\n      str = str.replace(/m/g, date.getUTCMinutes());\n      str = str.replace(/ss|SS/, this.pad(date.getUTCSeconds()));\n      str = str.replace(/s|S/g, date.getUTCSeconds());\n      str = str.replace(/q|Q/g, date.getUTCHours() > 12 ? DAY_STRING[1] : DAY_STRING[0]);\n      return str;\n    },\n    timestamp: function timestamp(date) {\n      return Math.floor(date.getTime() / 1000);\n    },\n    getDays: function getDays(date) {\n      return Math.floor((date.getTime() - MSE) / _DAYS);\n    },\n    getHours: function getHours(date) {\n      return Math.floor((date.getTime() - MSE) / _HOURS);\n    },\n    getMonths: function getMonths(date) {\n      return date.getYear() * 12 + date.getMonth() + 1;\n    },\n    isObject: function isObject(input) {\n      return Object.prototype.toString.call(input) === '[object Object]';\n    },\n    isArray: function isArray(input) {\n      return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\n    },\n    isDate: function isDate(input) {\n      return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';\n    },\n    isNumber: function isNumber(input) {\n      return input instanceof Number || Object.prototype.toString.call(input) === '[object Number]';\n    },\n    isString: function isString(input) {\n      return input instanceof String || Object.prototype.toString.call(input) === '[object String]';\n    },\n    extend: function extend(a, b) {\n      for (var i in b) {\n        if (hasOwnProp(b, i)) {\n          a[i] = b[i];\n        }\n      }\n\n      if (hasOwnProp(b, 'toString')) {\n        a.toString = b.toString;\n      }\n\n      if (hasOwnProp(b, 'valueOf')) {\n        a.valueOf = b.valueOf;\n      }\n\n      return a;\n    },\n    makeGetSet: function makeGetSet(unit) {\n      return function (value) {\n        if (value != undefined) {\n          // if(unit==\"Month\")value = value>0?(value-1):0;\n          Date.prototype[\"set\" + unit].call(this._date, value);\n          return this;\n        } else {\n          return Date.prototype[\"get\" + unit].call(this._date);\n          // return unit==\"Month\"?(result+1):result;\n        }\n      };\n    }\n  };\n\n  function hasOwnProp(a, b) {\n    return Object.prototype.hasOwnProperty.call(a, b);\n  }\n\n  var manbaPrototype__proto = _Manba.prototype;\n\n  var methods = {\n    \"year\": \"FullYear\",\n    \"day\": \"Day\",\n    \"date\": \"Date\",\n    \"hours\": \"Hours\",\n    \"milliseconds\": \"Milliseconds\",\n    \"seconds\": \"Seconds\",\n    \"minutes\": \"Minutes\",\n    \"time\": \"Time\"\n  };\n\n  for (var unit in methods) {\n    manbaPrototype__proto[unit] = Utils.makeGetSet(methods[unit]);\n  }\n\n  var manba = function manba(param, arg2) {\n    if (param instanceof _Manba) {\n      return new _Manba(param);\n    } else if (Utils.isObject(param)) {\n      //config\n      if (param.formatString && Utils.isObject(param.formatString)) {\n        Utils.extend(FORMAT_LIST, param.formatString);\n      }\n      if (param.now) {\n        timeDelay = manba(param.now).time() - manba().time();\n      }\n    } else {\n      return new _Manba(param, arg2);\n    }\n  };\n\n  manba.config = function (param) {\n    if (param.formatString && Utils.isObject(param.formatString)) {\n      Utils.extend(FORMAT_LIST, param.formatString);\n    }\n    if (param.now) {\n      timeDelay = manba(param.now).time() - manba().time();\n    }\n  };\n\n  manba.SECOND = \"SECOND\";\n  manba.MINUTE = \"MINUTE\";\n  manba.HOUR = \"HOUR\";\n  manba.DAY = \"DAY\";\n  manba.MONTH = \"MONTH\";\n  manba.YEAR = \"YEAR\";\n  manba.WEEK = \"WEEK\";\n  manba.TIME = \"TIME\";\n  manba.QUARTER = \"QUARTER\";\n\n  manba.MONDAY = 1;\n  manba.TUESDAY = 2;\n  manba.WEDNESDAY = 3;\n  manba.THURSDAY = 4;\n  manba.FRIDAY = 5;\n  manba.SATURDAY = 6;\n  manba.SUNDAY = 7;\n\n  return manba;\n});"},{"id":1,"identifier":"multi /Users/alicia/Documents/develop/github/manba/manba.js","name":"multi ./manba.js","index":0,"index2":1,"size":28,"cacheable":true,"built":true,"optional":false,"prefetched":false,"chunks":[0],"assets":[],"issuer":null,"issuerId":null,"issuerName":null,"failed":false,"errors":0,"warnings":0,"reasons":[],"usedExports":true,"providedExports":null,"depth":0}],"filteredModules":0,"children":[]}